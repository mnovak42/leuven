# compile on Ubuntu with gcc/g++ and CUDA in Debug mode
name: Ubuntu

# triggered in case of actions: push and pull request
on:
  push:
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/ubuntu_cuda_debug.yml"
  pull_request:
    paths:
      - "**"
      - "!.github"
      - ".github/workflows/ubuntu_cuda_debug.yml"

jobs:
  build:
    # the build will run on each elements of the `matrix`
    # each element of the `matrix` contains and os, cuda and gcc/g++ version 
    # combination 
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # the build matrix matrix of os, cuda and gcc versions
      matrix:
        include:
          # 18.04 supports CUDA 10.1+ (gxx <= 8)
          - os: ubuntu-18.04
            cuda: "11.0"
            gcc: 8
            
#          - os: ubuntu-18.04
#            cuda: "10.2"
#            gcc: 8
#          - os: ubuntu-18.04
#            cuda: "10.1"
#            gcc: 8
#
          # 16.04 supports CUDA 8+
#          - os: ubuntu-16.04
#            cuda: "11.0"
#            gcc: 7

#          - os: ubuntu-16.04
#            cuda: "10.0"
#            gcc: 7
#          - os: ubuntu-16.04
#            cuda: "9.2"
#            gcc: 7
#          - os: ubuntu-16.04
#            cuda: "9.1"
#            gcc: 6
#          - os: ubuntu-16.04
#            cuda: "9.0"
#            gcc: 6

    # setting the `build` directory name and `build type` of the environment
    env:
      build_dir: "build" # here we might change ot "${{runner.workspace}}/build"
      config: "Debug"
    
    # checkout a copy of the repository to the runner
    steps:
    - uses: actions/checkout@v2

    # install cuda (the version according to the current matrix element), set 
    # the corresponding `cuda` environment variable and export environment 
    # variables (CUDA PATH and LIBS that allows CMake to find all CUDA related 
    # variables by using its built in FindCUDA modul)
    - name: Install CUDA
      env:
        cuda: ${{ matrix.cuda }}
      run: |
        source ./scripts/actions/install_cuda_ubuntu.sh
        if [[ $? -eq 0 ]]; then
          # Set paths for subsequent steps, using ${CUDA_PATH}
          echo "Adding CUDA to CUDA_PATH, PATH and LD_LIBRARY_PATH"
          echo "::set-env name=CUDA_PATH::${CUDA_PATH}"
          echo "::add-path::${CUDA_PATH}/bin"
          echo "::set-env name=LD_LIBRARY_PATH::${CUDA_PATH}/lib:${LD_LIBRARY_PATH}"
        fi
      shell: bash

    # install/select gcc/g++ (the version according to the current matrix element)
    # and export environment variables (CC, CXX compilers that CMake will use to 
    # set CMAKE_C_COMPILER and CMAKE_CXX_COMPILER compiler executables)
    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "::set-env name=CC::/usr/bin/gcc-${{ matrix.gcc }}"
        echo "::set-env name=CXX::/usr/bin/g++-${{ matrix.gcc }}"
        echo "::set-env name=CUDAHOSTCXX::/usr/bin/g++-${{ matrix.gcc }}"

    # setting up/creating the CMake build directly and set the build type (also 
    # the '.' referes to the source directory)
    # add the additional 'leuven' CMake configurations for CUDA build and enabling
    # testing as -DUSE_CUBLAS=ON -DBUILD_TESTS=ON 
    - name: Configure cmake 
      id: configure
      run: cmake . -B ${{ env.build_dir }} -DCMAKE_BUILD_TYPE=${{ env.config }} -DUSE_CUBLAS=ON -DBUILD_TESTS=ON 

    # show content of CMakeFiles/CMakeOutput.log and )CMakeFiles/CMakeError.log
    # in case of CMake configuration error
    - name: Configure Error Processing
      if: ${{ failure() && steps.configure.outcome == 'failure' }}
      working-directory: ${{ env.build_dir }}
      run: |
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            echo "---- CMakeFiles/CMakeOutput.log"
            cat CMakeFiles/CMakeOutput.log
            echo "----"
          fi
          if [[ -f "CMakeFiles/CMakeError.log" ]]; then
            echo "---- CMakeFiles/CMakeError.log"
            cat CMakeFiles/CMakeError.log
            echo "----"
          fi


    # build with all the above configuartion by enabling to use CUDA  
    - name: Build everything else
      working-directory: ${{ env.build_dir }}
      run: cmake --build . --target all --verbose -j `nproc`

    # execute the tests
    - name: Test
      working-directory: ${{ env.build_dir }}
      shell: bash
      # Execute tests defined by the CMake configuration.  
      run: ctest -C ${{ env.config }}
