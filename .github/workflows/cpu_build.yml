name: cpu-build

on:
  push:
    paths-ignore:
      - 'README.md'
      - '.github/**'
      - 'docs/**'
      - 'apps/examples/KSC/docs/**'
      - '*.yml'
    branches:
      - master
  pull_request:
    paths-ignore:
      - 'README.md'
      - '.github/**'
      - 'docs/**'
      - 'apps/examples/KSC/docs/**'
      - '*.yml'
    branches:
      - master

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # set up the os and compiler combinations to test
      matrix:
        # populate the .name matrix
        name: [
          ubuntu-20.04-gcc-9,
          ubuntu-18.04-gcc-8,
          ubuntu-18.04-gcc-7,
          macOS-10.15-gcc-9,
          macOS-10.15-gcc-8,
          macOS-10.15-xcode-11.7,
          macOS-10.15-xcode-12.1,
        ]
        # populate the .os matrix
        include:
            ## Ubuntu + gcc
          - name: ubuntu-20.04-gcc-9
            os: ubuntu-20.04
            compiler: gcc
            version: "9"

          - name: ubuntu-18.04-gcc-8
            os: ubuntu-18.04
            compiler: gcc
            version: "8"

          - name: ubuntu-18.04-gcc-7
            os: ubuntu-18.04
            compiler: gcc
            version: "7"

            ## MacOS + gcc
          - name: macOS-10.15-gcc-9
            os: macOS-10.15
            compiler: gcc
            version: "9"

          - name: macOS-10.15-gcc-8
            os: macOS-10.15
            compiler: gcc
            version: "8"

            ## MacOS + clang
          - name: macOS-10.15-xcode-11.7
            os: macOS-10.15
            compiler: xcode
            version: "11.7"

          - name: macOS-10.15-xcode-12.1
            os: macOS-10.15
            compiler: xcode
            version: "12.1"


    steps:
      - uses: actions/checkout@v2

      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          # it's always gcc compiler in case of Linux so just protect for future
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
               sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
               echo "CC=/usr/bin/gcc-${{ matrix.version }}" >> $GITHUB_ENV
               echo "CXX=/usr/bin/g++-${{ matrix.version }}" >> $GITHUB_ENV
          fi

      - name: Install (MacOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            brew install gcc@${{ matrix.version }}
            echo "CC=/usr/local/bin/gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=/usr/local/bin/g++-${{ matrix.version }}" >> $GITHUB_ENV
            echo "FC=/usr/local/bin/gfortran-${{ matrix.version }}" >> $GITHUB_ENV
          else
            brew install gcc@10
            sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
            echo "FC=/usr/local/bin/gfortran-10" >> $GITHUB_ENV
          fi

      - name: Build & Test Debug
        run: |
          cmake -E remove_directory build
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON
          cmake --build build
          cd build && ctest -j2 --verbose --output-on-failure

      - name: Build & Test Release
        run: |
          cmake -E remove_directory build
          cmake -B build -S . -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
          cmake --build build
          cd build && ctest -j2 --verbose --output-on-failure
